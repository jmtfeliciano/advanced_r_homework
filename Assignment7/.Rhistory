#Can extract just the complete case
v4a<-complete.cases(v4)
#Use the information contained in v4a to extract just the complete case
v4b<-v4[v4a,]
#NOTE WITHIN v4, extracts where v4a is true, eliminates rows with NA values
#Can subset based on the value of a variable
#Extract only those with a Master's degree from the Salary data set
masters<-v1[v1$degree=="Masters",]
#Can base it on a continue variable
v1a<-v1[v1$salary>30000,]
#Can use the subset function
#How to we find out what a function does in R?  How do we access the documentation?
#The first object is the data set name, and the second is the argument on how to subset
v1b<-subset(v1,salary>30000)
#Dropping matrix dimensions
#Suppose want to drop Test 3
v4c<-v4[, -4]
#Similarly, drop a row
v4d<-v4[-3,] #drop Joe
#Drop more than one column
v4e<-v4[,-2:-3] # Drop test 1 and test 2
#OR
v4f<-v4[,-(2:3)]
# OR Could use the subset function here as well
v4f1<-subset(v4,select=c(Name,Test3,Test4))
wd<-"/Users/jfeliciano/Documents/advancedr/Notes6/DataNotes6"
#Set the working director
setwd(wd)
test<-read.csv("TEST.txt", header=TRUE)
Salary data
#What happens in the first column?
v1<-read.csv("salary.csv", header=T)
#Can indicate the row names by telling what column the names are located in
v1<-read.csv("salary.csv", header=T, row.names=1)
#Can also read the csv file in using the read.table
v2<-read.table("salary.csv", sep=",", header=T, row.names=1)
#What happens if #?
v3<-read.delim("cancer1.txt", sep="#", header=F)
#Data sets with missing values
v4<-read.csv("TEST.txt", header=TRUE)
#Can extract just the complete case
v4a<-complete.cases(v4)
#Use the information contained in v4a to extract just the complete case
v4b<-v4[v4a,]
#NOTE WITHIN v4, extracts where v4a is true, eliminates rows with NA values
#Can subset based on the value of a variable
#Extract only those with a Master's degree from the Salary data set
masters<-v1[v1$degree=="Masters",]
#Can base it on a continue variable
v1a<-v1[v1$salary>30000,]
#Can use the subset function
#How to we find out what a function does in R?  How do we access the documentation?
#The first object is the data set name, and the second is the argument on how to subset
v1b<-subset(v1,salary>30000)
#Dropping matrix dimensions
#Suppose want to drop Test 3
v4c<-v4[, -4]
#Similarly, drop a row
v4d<-v4[-3,] #drop Joe
#Drop more than one column
v4e<-v4[,-2:-3] # Drop test 1 and test 2
#OR
v4f<-v4[,-(2:3)]
# OR Could use the subset function here as well
v4f1<-subset(v4,select=c(Name,Test3,Test4))
v4
v4$Test1[is.na(v4$Test1)==TRUE]=0
v4
v4$weighted.average<-.2*v4$Test1+.15*v4$Test2+.15*v4$Test3+.5*v4$Test4
#Calculate the average
v4$average<-(v4$Test1+v4$Test2+v4$Test3+v4$Test4)/4
#Row Means
v4$average.score<-rowMeans(v4[,2:5])
v4
v4$Test2[is.na(v4$Test2)==TRUE]=0
v4$Test1[is.na(v4$Test1)==TRUE]=0
v4$Test2[is.na(v4$Test2)==TRUE]=0
#calculate the weighted average
#Test 1 is worth 20%, test 2 15%, test 3 15%, test 4 50%
v4$weighted.average<-.2*v4$Test1+.15*v4$Test2+.15*v4$Test3+.5*v4$Test4
#Calculate the average
v4$average<-(v4$Test1+v4$Test2+v4$Test3+v4$Test4)/4
#Row Means
v4$average.score<-rowMeans(v4[,2:5])
v4
v4$letter[v4$average >= 90]='A'
v4
v4<-NULL
rm v4
v4 rm
rm(v4)
atrix(c(10),3,3)
matrix(c(10),3,3)
matrix(10,3,3)
a<-matrix(11:18,4,2)
b<-matrix(rep(1,14),2,7)
#What should the dimensions of this matrix be?
c<-a%*%b
#What happens if we try the other way?
b%*%a
v<-read.table("GRADES.txt", header=T)
v<-read.table("GRADES.txt", header=T)
class(v$Testdate)
v$Testdate
as.Date(v$Testdate)
install.packages("lubridate") #install package
library(lubridate)
?lubridate
?`lubridate-package`
base::date()
install.packages("dplyr")
#Then you need to initialize use by calling a library
library(dplyr)
anal<-select(v1, c(year,salary))
anal
?date
?Date
anal<-select(v1, c(year,salary))
#Can also omit columns using the select function
anal1<-select(v1, -c(degree:sex, ysdeg))
#head function will print the first few lines of data (default is 6)
head(anal1)
#If you want less or more, you can specify
head(anal1,3)
head(anal1,10)
#Filter function - this can be found in multiple packages
?filter
#Can qualify with the package name
?dplyr::filter
#Filter function can be used to extract subsets of rows
#Similar to subset.
anal2<-filter(v1, salary>30000)
#Can filter by multiple factors
#What is wrong with this code?
anal3<-filter(v1, salary>30000 & degree="Masters")
#Corrected code
anal3<-filter(v1, salary>30000 & degree=="Masters")
#Similarly we could filter even further
anal4<-filter(v1, salary>30000 & degree=="Masters" & sex=="Female")
#Arrange Function
#Sorting function - can reorder rows by one of the variables
anal5<-arrange(v1, salary)
#Can also sort in descending order
anal6<-arrange(v1,desc(salary))
#Rename function - rename variables
names(v1)
#Syntax: new name left of =, old name on right
v1<-rename(v1, Gender=sex, Years.Since.Degree=ysdeg)
names(v1)
#-------------------------------------------------------------------------
#Installing the Yale Took Kit package
install.packages("YaleToolkit")
#From CRAN: This collection of data exploration tools was developed at Yale University for the graphical
#exploration of complex multivariate data; barcode and gpairs now have their own packages.
#The new big.read.table() provided here may be useful for large files when only a subset is needed.
library(YaleToolkit)
#One of the nice function of this toolkit is whatis
#This function is similar to proc contents in SAS
whatis(v1)
v1
test_data <- v1
test_data
test_data[degree > "Masters",]
test_data[degree > "Masters"]
test_data[degree == "Masters"]
test_data[degree = "Masters"]
test_data[degree = "Masters"]
test_data[,degree == "Masters"]
test_data[test_data$degree=="Masters",]
test_data[test_data$degree=="Masters" & test_data$Gender="Male",]
test_data[test_data$degree=="Masters" & test_data$Gender=="Male",]
whatis(v1)
str(v1)
exp2<-read.csv("Experiment2.csv", header=T)
whatis(exp2)
head(exp2)
exp3<-read.csv("Experiment3.csv", header=T)
whatis(exp3)
head(exp3)
?rbind
c(1,2,3)
a<-c(1,2,3)
b<-c(1,2,3,4)
rbind(a,b)
c<-rbind(a,b)
c
b<-c(1,2,3,4,5,6,7)
c<-rbind(a,b)
c
full.data1<-bind_rows(exp2,exp3)
full.data1
long.fulldata<-reshape(full.data, direction="long", varying=3:67, sep="", idvar="TagID")
full.data1<-bind_rows(exp2,exp3)
long.fulldata<-reshape(full.data, direction="long", varying=3:67, sep="", idvar="TagID")
full.data<-rbind(exp2,exp3)
full.data1<-bind_rows(exp2,exp3)
long.fulldata<-reshape(full.data, direction="long", varying=3:67, sep="", idvar="TagID")
nrow(long.fulldata) #the number of row is 27*65
head(long.fulldata, 30)
remove<-complete.cases(long.fulldata)
long.fulldata1<-long.fulldata[remove,]
full.data
remove<-complete.cases(long.fulldata)
remove
long.fulldata1<-long.fulldata[remove,]
long.fulldata
full.data
nrow(long.fulldata)
long.fulldata1<-long.fulldata[remove,]
nrow(long.fulldata1)
long.fulldata1
long.fulldata
long.fulldata1
group_by(long.fulldata1, Group, time, add=TRUE)
means<-group_by(long.fulldata1, Group, time, add=TRUE) %>%summarize(m=mean(PST))
means
group_by(long.fulldata1, Group, time, add=TRUE)
means<-group_by(long.fulldata1, Group, time, add=TRUE) %>% summarize(mean(PST))
means
means<-group_by(long.fulldata1, Group, time, add=TRUE) %>% summarize(m=mean(PST))
means
means$m
means<-group_by(long.fulldata1, Group, time, add=TRUE) %>% summarize(m=mean(PST),totalcount=n())
means
long.fulldata1
wide.fulldata<-reshape(long.fulldata1, timevar="time", idvar="TagID", v.names="PST", direction="wide")
wide.fulldata
I like to use the message function to print for debugging, since it seems to reach the console from whatever dark depths it might be emitting from. For example:
somefunc <- function(x) {
message(paste('ok made it this far with x=',x))
# some stuff to debug
message(paste('ok made it this far with x^2=',x^2))
# some more stuff to debug
message(paste('ok made it to the end of the function with x^3=',x^3))
}
somefunc <- function(x) {
message(paste('ok made it this far with x=',x))
# some stuff to debug
message(paste('ok made it this far with x^2=',x^2))
# some more stuff to debug
message(paste('ok made it to the end of the function with x^3=',x^3))
}
;
somefunc <- function(x) {
message(paste('ok made it this far with x=',x))
# some stuff to debug
message(paste('ok made it this far with x^2=',x^2))
# some more stuff to debug
message(paste('ok made it to the end of the function with x^3=',x^3))
}
somefunc()
mean(as.numeric(analysis$BMI), na.rm = TRUE)
mean(as.numeric(analysis$BMI), na.rm = TRUE)
# Creates path and set current directory
wd<-"/Users/jfeliciano/Documents/advancedr/homework/Assignment7"
setwd(wd)
# loads csv file
loaded_data <- read.csv("AdoptionData.csv", header=TRUE)
# vector with splitted list of variables requested by PDF HW6 prompt
desired_variables <- strsplit(split = ", " , x="uniqueid, COUNTRY, LIVING, ADOPTAGE, AGETST1, WTTST1, HTTST1, INDTST1, RESTST1, CXRDONE, GENDER" )[[1]]
# subsets my data using select, selects data variables requested by hw prompt
# note to self: the dplyr way is select(loaded_data, desired_variables)
subset_data <- loaded_data[desired_variables]
# filters data if uniqueid is non-empty
# note to self:  the dplyr way is filter(subset_data, !is.na(uniqueid))
analysis <- subset_data[!is.na(subset_data$uniqueid),]
# do nested for-loops to traverse all rows and columns, and replace 99 values to NA
for(row in 1:nrow(analysis)) {
for(col in 1:ncol(analysis)) {
if(!is.na(analysis[row,col]) && analysis[row,col] == 99) {
analysis[row,col] <- NA
}
}
}
# creates levels and labels for the following varables:
# COUNTRY, LIVING, ADOPTAGE, AGETST1, WTTST1, HTTST1, INDTST1, RESTST1, CXRDONE, GENDER
analysis$COUNTRY <- factor(analysis$COUNTRY, levels = c(1:23),
labels = c("China", "Russia", "Guatemala", "South Korea", "India", "Ukraine", "Thailand",
"Ethiopia", "Phillipines", "Haiti", "Kenya", "Kazhakstan", "Singapore", "Bulgaria",
"Romania", "Hawaii", "Belarus", "Cambodia", "Georgia", "Columbia", "Vietnam",
"Siberia", "Moldavia"))
analysis$LIVING <- factor(analysis$LIVING, levels = c(1:5),
labels = c("Orphanage only", "Foster care only", "Both orphanage and foster care",
"Other", "Unknown"))
analysis$RESTST1 <- factor(analysis$RESTST1, levels =c(1,2), labels = c("Positive","Negative"))
analysis$CXRDONE <- factor(analysis$CXRDONE, levels = c(0,1,88), labels = c("No", "Yes", "CXR not required"))
analysis$GENDER <- factor(analysis$GENDER, levels = c(0,1), labels = c("female","male"))
# prints tables from frequency for both gender and cxrdone
table(analysis$GENDER)
table(analysis$CXRDONE)
# calculates BMI using WTTST1, HTTST1 variables, then calculates mean BMI
analysis$BMI <- (analysis$WTTST1/(analysis$HTTST1**2))*10000
mean(as.numeric(analysis$BMI), na.rm = TRUE)
wd<-"/Users/jfeliciano/Documents/advancedr/homework/Assignment7"
setwd(wd)
loaded_data <- read.csv("AdoptionData.csv", header=TRUE)
desired_variables <- strsplit(split = ", " , x="uniqueid, COUNTRY, LIVING, ADOPTAGE, AGETST1, WTTST1, HTTST1, INDTST1, RESTST1, CXRDONE, GENDER" )[[1]]
subset_data <- loaded_data[desired_variables]
analysis <- subset_data[!is.na(subset_data$uniqueid),]
View(analysis)
wd<-"/Users/jfeliciano/Documents/advancedr/homework/Assignment7"
setwd(wd)
# loads csv file
loaded_data <- read.csv("AdoptionData.csv", header=TRUE)
# vector with splitted list of variables requested by PDF HW6 prompt
desired_variables <- strsplit(split = ", " , x="uniqueid, COUNTRY, LIVING, ADOPTAGE, AGETST1, WTTST1, HTTST1, INDTST1, RESTST1, CXRDONE, GENDER" )[[1]]
# subsets my data using select, selects data variables requested by hw prompt
# note to self: the dplyr way is select(loaded_data, desired_variables)
subset_data <- loaded_data[desired_variables]
# filters data for entries where uniqueid is non-empty
# note to self:  the dplyr way is filter(subset_data, !is.na(uniqueid))
analysis <- subset_data[!is.na(subset_data$uniqueid),]
View(analysis)
for(row in 1:nrow(analysis)) {
for(col in 1:ncol(analysis)) {
# if entry value is both non-NA and 99, replace with NA
if(!is.na(analysis[row,col]) && analysis[row,col] == 99) {
analysis[row,col] <- NA
}
}
}
View(analysis)
table(analysis$GENDER)
table(analysis$CXRDONE)
# COUNTRY, LIVING, ADOPTAGE, AGETST1, WTTST1, HTTST1, INDTST1, RESTST1, CXRDONE, GENDER
analysis$COUNTRY <- factor(analysis$COUNTRY, levels = c(1:23),
labels = c("China", "Russia", "Guatemala", "South Korea", "India", "Ukraine", "Thailand",
"Ethiopia", "Phillipines", "Haiti", "Kenya", "Kazhakstan", "Singapore", "Bulgaria",
"Romania", "Hawaii", "Belarus", "Cambodia", "Georgia", "Columbia", "Vietnam",
"Siberia", "Moldavia"))
analysis$LIVING <- factor(analysis$LIVING, levels = c(1:5),
labels = c("Orphanage only", "Foster care only", "Both orphanage and foster care",
"Other", "Unknown"))
analysis$RESTST1 <- factor(analysis$RESTST1, levels =c(1,2), labels = c("Positive","Negative"))
analysis$CXRDONE <- factor(analysis$CXRDONE, levels = c(0,1,88), labels = c("No", "Yes", "CXR not required"))
analysis$GENDER <- factor(analysis$GENDER, levels = c(0,1), labels = c("female","male"))
# prints tables from frequency for both gender and cxrdone
table(analysis$GENDER)
table(analysis$CXRDONE)
# Josemari Feliciano
# HW 7
# Creates path and set current directory
wd<-"/Users/jfeliciano/Documents/advancedr/homework/Assignment7"
setwd(wd)
# loads csv file
loaded_data <- read.csv("AdoptionData.csv", header=TRUE)
# vector with splitted list of variables requested by PDF HW6 prompt
desired_variables <- strsplit(split = ", " , x="uniqueid, COUNTRY, LIVING, ADOPTAGE, AGETST1, WTTST1, HTTST1, INDTST1, RESTST1, CXRDONE, GENDER" )[[1]]
# subsets my data using select, selects data variables requested by hw prompt
# note to self: the dplyr way is select(loaded_data, desired_variables)
subset_data <- loaded_data[desired_variables]
# filters data for entries where uniqueid is non-empty
# note to self:  the dplyr way is filter(subset_data, !is.na(uniqueid))
analysis <- subset_data[!is.na(subset_data$uniqueid),]
for(row in 1:nrow(analysis)) {
for(col in 2:ncol(analysis)) {
# if entry value is both non-NA and 99, replace with NA
if(analysis[row,col] == 99) {
analysis[row,col] <- NA
}
}
}
for(row in 1:nrow(analysis)) {
for(col in 2:ncol(analysis)) {
# if entry value is both non-NA and 99, replace with NA
if(!is.na(analysis[row,col]) && analysis[row,col] == 99) {
analysis[row,col] <- NA
}
}
}
# do nested for-loops to traverse all rows and columns
# replace 99 values to NA, start with column 2 since we don't want to serve uniqueID
for(row in 1:nrow(analysis)) {
for(col in 2:ncol(analysis)) {
# if entry value is both non-NA and 99, replace with NA
if(!is.na(analysis[row,col]) && analysis[row,col] == 99) {
analysis[row,col] <- NA
}
}
for(row in 1:nrow(analysis)) {
for(col in 2:ncol(analysis)) {
# if entry value is both non-NA and 99, replace with NA
if(!is.na(analysis[row,col]) && analysis[row,col] == 99) {
analysis[row,col] <- NA
}
}
}
table(analysis$GENDER, useNA = "Missing")
table(analysis$GENDER, useNA = "Missing")
''
;
j
l;l
;a
1
`/`
/
table(analysis$GENDER, useNA = "Missing")
table(analysis$GENDER, exclude = NULL)
analysis$COUNTRY <- factor(analysis$COUNTRY, levels = c(1:23),
labels = c("China", "Russia", "Guatemala", "South Korea", "India", "Ukraine", "Thailand",
"Ethiopia", "Phillipines", "Haiti", "Kenya", "Kazhakstan", "Singapore", "Bulgaria",
"Romania", "Hawaii", "Belarus", "Cambodia", "Georgia", "Columbia", "Vietnam",
"Siberia", "Moldavia"))
analysis$LIVING <- factor(analysis$LIVING, levels = c(1:5),
labels = c("Orphanage only", "Foster care only", "Both orphanage and foster care",
"Other", "Unknown"))
analysis$RESTST1 <- factor(analysis$RESTST1, levels =c(1,2), labels = c("Positive","Negative"))
analysis$CXRDONE <- factor(analysis$CXRDONE, levels = c(0,1,88), labels = c("No", "Yes", "CXR not required"))
analysis$GENDER <- factor(analysis$GENDER, levels = c(0,1), labels = c("female","male"))
table(analysis$GENDER, useNA = "Missing")
table(analysis$GENDER, exclude = NULL)
table(analysis$GENDER, exclude = NULL)
table(analysis$CXRDONE, exclude = NULL)
analysis$BMI <- (analysis$WTTST1/(analysis$HTTST1**2))*10000
mean(as.numeric(analysis$BMI), na.rm = TRUE)
mean(analysis$BMI, na.rm = TRUE)
analysis$BMI <- (analysis$WTTST1/(analysis$HTTST1**2))*10000
mean(analysis$BMI, na.rm = TRUE)
# Josemari Feliciano
# HW 7
# Creates path and set current directory
wd<-"/Users/jfeliciano/Documents/advancedr/homework/Assignment7"
setwd(wd)
# loads csv file
loaded_data <- read.csv("AdoptionData.csv", header=TRUE)
# vector with splitted list of variables requested by PDF HW6 prompt
desired_variables <- strsplit(split = ", " , x="uniqueid, COUNTRY, LIVING, ADOPTAGE, AGETST1, WTTST1, HTTST1, INDTST1, RESTST1, CXRDONE, GENDER" )[[1]]
# subsets my data using select, selects data variables requested by hw prompt
# note to self: the dplyr way is select(loaded_data, desired_variables)
subset_data <- loaded_data[desired_variables]
# filters data for entries where uniqueid is non-empty
# note to self:  the dplyr way is filter(subset_data, !is.na(uniqueid))
analysis <- subset_data[!is.na(subset_data$uniqueid),]
# do nested for-loops to traverse all rows and columns
# replace 99 values to NA, start with column 2 since we don't want to search/replace uniqueID
for(row in 1:nrow(analysis)) {
for(col in 2:ncol(analysis)) {
# if entry value is BOTH non-NA and 99, will replace with NA (added the extra non-NA code to prevent errors in some R version)
if(!is.na(analysis[row,col]) && analysis[row,col] == 99) {
analysis[row,col] <- NA
}
}
}
# creates levels and labels for the following varables:
# COUNTRY, LIVING, ADOPTAGE, AGETST1, WTTST1, HTTST1, INDTST1, RESTST1, CXRDONE, GENDER
analysis$COUNTRY <- factor(analysis$COUNTRY, levels = c(1:23),
labels = c("China", "Russia", "Guatemala", "South Korea", "India", "Ukraine", "Thailand",
"Ethiopia", "Phillipines", "Haiti", "Kenya", "Kazhakstan", "Singapore", "Bulgaria",
"Romania", "Hawaii", "Belarus", "Cambodia", "Georgia", "Columbia", "Vietnam",
"Siberia", "Moldavia"))
analysis$LIVING <- factor(analysis$LIVING, levels = c(1:5),
labels = c("Orphanage only", "Foster care only", "Both orphanage and foster care",
"Other", "Unknown"))
analysis$RESTST1 <- factor(analysis$RESTST1, levels =c(1,2), labels = c("Positive","Negative"))
analysis$CXRDONE <- factor(analysis$CXRDONE, levels = c(0,1,88), labels = c("No", "Yes", "CXR not required"))
analysis$GENDER <- factor(analysis$GENDER, levels = c(0,1), labels = c("female","male"))
# REQUESTED OUTPUT FOR THIS HOMEWORK
# prints tables from frequency for both gender and cxrdone
table(analysis$GENDER, exclude = NULL)
table(analysis$CXRDONE, exclude = NULL)
# calculates BMI using WTTST1, HTTST1 variables, then calculates mean BMI
analysis$BMI <- (analysis$WTTST1/(analysis$HTTST1**2))*10000
mean(analysis$BMI, na.rm = TRUE)
mean(analysis$BMI, na.rm = TRUE)
analysis$BMI <- (analysis$WTTST1/(analysis$HTTST1**2))*10000
table(analysis$CXRDONE, exclude = NULL)
table(analysis$GENDER, exclude = NULL)
wd<-"/Users/jfeliciano/Documents/advancedr/homework/Assignment7"
# Creates path and set current directory
wd<-"/Users/jfeliciano/Documents/advancedr/homework/Assignment7"
setwd(wd)
# loads csv file
loaded_data <- read.csv("AdoptionData.csv", header=TRUE)
# vector with splitted list of variables requested by PDF HW6 prompt
desired_variables <- strsplit(split = ", " , x="uniqueid, COUNTRY, LIVING, ADOPTAGE, AGETST1, WTTST1, HTTST1, INDTST1, RESTST1, CXRDONE, GENDER" )[[1]]
# subsets my data using select, selects data variables requested by hw prompt
# note to self: the dplyr way is select(loaded_data, desired_variables)
subset_data <- loaded_data[desired_variables]
# filters data for entries where uniqueid is non-empty
# note to self:  the dplyr way is filter(subset_data, !is.na(uniqueid))
analysis <- subset_data[!is.na(subset_data$uniqueid),]
# do nested for-loops to traverse all rows and columns
# replace 99 values to NA, start with column 2 since we don't want to search/replace uniqueID
for(row in 1:nrow(analysis)) {
for(col in 2:ncol(analysis)) {
# if entry value is BOTH non-NA and 99, will replace with NA (added the extra non-NA code to prevent errors in some R version)
if(!is.na(analysis[row,col]) && analysis[row,col] == 99) {
analysis[row,col] <- NA
}
}
}
# creates levels and labels for the following varables:
# COUNTRY, LIVING, ADOPTAGE, AGETST1, WTTST1, HTTST1, INDTST1, RESTST1, CXRDONE, GENDER
analysis$COUNTRY <- factor(analysis$COUNTRY, levels = c(1:23),
labels = c("China", "Russia", "Guatemala", "South Korea", "India", "Ukraine", "Thailand",
"Ethiopia", "Phillipines", "Haiti", "Kenya", "Kazhakstan", "Singapore", "Bulgaria",
"Romania", "Hawaii", "Belarus", "Cambodia", "Georgia", "Columbia", "Vietnam",
"Siberia", "Moldavia"))
analysis$LIVING <- factor(analysis$LIVING, levels = c(1:5),
labels = c("Orphanage only", "Foster care only", "Both orphanage and foster care",
"Other", "Unknown"))
analysis$RESTST1 <- factor(analysis$RESTST1, levels =c(1,2), labels = c("Positive","Negative"))
analysis$CXRDONE <- factor(analysis$CXRDONE, levels = c(0,1,88), labels = c("No", "Yes", "CXR not required"))
analysis$GENDER <- factor(analysis$GENDER, levels = c(0,1), labels = c("female","male"))
# REQUESTED OUTPUT FOR THIS HOMEWORK
# prints tables from frequency for both gender and cxrdone
table(analysis$GENDER, exclude = NULL)
table(analysis$CXRDONE, exclude = NULL)
# calculates BMI using WTTST1, HTTST1 variables, then calculates mean BMI
analysis$BMI <- (analysis$WTTST1/(analysis$HTTST1**2))*10000
mean(analysis$BMI, na.rm = TRUE)
